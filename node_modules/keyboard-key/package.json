{
  "_args": [
    [
      {
        "raw": "keyboard-key@^1.0.4",
        "scope": null,
        "escapedName": "keyboard-key",
        "name": "keyboard-key",
        "rawSpec": "^1.0.4",
        "spec": ">=1.0.4 <2.0.0",
        "type": "range"
      },
      "/Applications/XAMPP/xamppfiles/htdocs/revents/node_modules/semantic-ui-react"
    ]
  ],
  "_from": "keyboard-key@^1.0.4",
  "_hasShrinkwrap": false,
  "_id": "keyboard-key@1.0.4",
  "_location": "/keyboard-key",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/keyboard-key_1.0.4_1547775798627_0.12585474377763006"
  },
  "_npmUser": {
    "name": "levithomason",
    "email": "me@levithomason.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "keyboard-key@^1.0.4",
    "scope": null,
    "escapedName": "keyboard-key",
    "name": "keyboard-key",
    "rawSpec": "^1.0.4",
    "spec": ">=1.0.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/semantic-ui-react"
  ],
  "_resolved": "https://registry.npmjs.org/keyboard-key/-/keyboard-key-1.0.4.tgz",
  "_shasum": "52d8fa07b7e17757072aa22a67fb4ae85e4c46b0",
  "_shrinkwrap": null,
  "_spec": "keyboard-key@^1.0.4",
  "_where": "/Applications/XAMPP/xamppfiles/htdocs/revents/node_modules/semantic-ui-react",
  "author": {
    "name": "Levi Thomason"
  },
  "bugs": {
    "url": "https://github.com/levithomason/keyboard-key/issues"
  },
  "dependencies": {},
  "description": "A simple utility for determining the KeyboardEvent.key property from a keyboard event.",
  "devDependencies": {
    "babel-eslint": "^8.0.0",
    "eslint": "^4.4.1",
    "eslint-config-prettier": "^2.3.0",
    "eslint-plugin-json": "^1.2.0",
    "eslint-plugin-prettier": "^2.2.0",
    "greenkeeper-lockfile": "^1.8.1",
    "husky": "^0.14.3",
    "jest": "^22.1.3",
    "lint-staged": "^6.0.1",
    "markdown-toc": "^1.1.0",
    "prettier": "^1.6.1",
    "ta-scripts": "^2.5.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-my04dE6BCwPpwoe4KYKfPxWiwgDYQOHrVmtzn1CfzmoEsGG/ef4oZGaXCzi1+iFhG7CN5JkOuxmei5OABY8/ag==",
    "shasum": "52d8fa07b7e17757072aa22a67fb4ae85e4c46b0",
    "tarball": "https://registry.npmjs.org/keyboard-key/-/keyboard-key-1.0.4.tgz",
    "fileCount": 11,
    "unpackedSize": 173478,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcQS83CRA9TVsSAnZWagAAEsUP/28Mliz2Xa8GJL1oG8Tn\nksNUaKT9qkOPJVFi5K4s1282vsAnP/lZBBshLjKFocmL/lVNrxtYgKUVZtSq\ngmz3Zeknycdy6h9iCoAqo+qdjQt8FomtNQjIHrIUBypCf6BYfABGOyWtN4kx\nUeo9qTmmRNETb4RBKRbR+ZXi8BU2y8/4TdorcsZt0eyYl0rWI4gGLVszaN0l\nPLoGJf4s1hsNeVsZkJbJmoUPc5c+fhIVAwD23KmX33//FlbbKOwIU9fWDSO9\nn8KUlYN/sQtpDAbaeN+NWEbCykH7GE2B8S7/4uJudBjgGQ/Ly/qsbfz/WQQT\nQtr2uXhiiO2VNTUHIbeYXBaj4U1hgYp568OTv3NJ9mgkfSbhwpsWbcejpvlp\nvz5zS/Et2M+HOS614Okho9HHRDODlNK4igvd9Hw+BCOCAW0rhHEa5tBrru+g\nKbTwCgoCJy2VXkMgI5Qt+fF1SmZf4xd43orFrqlgHEtfbLD37Y4WCii4PKAb\nulAzdrmTYUDIgL0U05C3DxXaeHR5qKYe+YrQEXZ7jC3bolBcM5zedsVkY2te\nbcompCkWk0sAkQ7EN6BOB+Rm9xf71LNht4rtKCiiD5M9ViEyAQty1l4D/BA6\nZqMFMQBa92YdovQMhvIQRMM32F6i8A1dzmkzGmwCA+V2r3GSPKK2hE6wlnqt\ncZe0\r\n=0Rxg\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "ca84aa1e53f197aa8ff631a94bb4fc8125fec5cb",
  "homepage": "https://github.com/levithomason/keyboard-key#readme",
  "jest": {
    "collectCoverage": true,
    "collectCoverageFrom": [
      "src/**/*.js",
      "!**/node_modules/**",
      "!**/test/**"
    ],
    "coverageDirectory": "coverage",
    "coverageThreshold": {
      "global": {
        "branches": 50,
        "functions": 50,
        "lines": 50,
        "statements": 50
      }
    },
    "roots": [
      "./src",
      "./test"
    ],
    "testMatch": [
      "**/*.spec.js"
    ],
    "testEnvironment": "node"
  },
  "license": "MIT",
  "lint-staged": {
    "*.js?(on|x)": [
      "prettier --write",
      "eslint --fix",
      "git add"
    ]
  },
  "main": "src/keyboardKey.js",
  "maintainers": [
    {
      "name": "levithomason",
      "email": "me@levithomason.com"
    }
  ],
  "name": "keyboard-key",
  "optionalDependencies": {},
  "readme": "keyboard-key\n[![CircleCI](https://img.shields.io/circleci/project/github/levithomason/keyboard-key/master.svg?style=flat-square)](https://circleci.com/gh/levithomason/keyboard-key/master)\n[![Codecov](https://img.shields.io/codecov/c/github/levithomason/keyboard-key/master.svg?style=flat-square)](https://codecov.io/gh/levithomason/keyboard-key)\n[![David](https://img.shields.io/david/levithomason/keyboard-key.svg?style=flat-square)](https://david-dm.org/levithomason/keyboard-key)\n[![npm](https://img.shields.io/npm/v/keyboard-key.svg?style=flat-square)](https://www.npmjs.com/package/keyboard-key)\n============\n\nA simple utility for determining the `KeyboardEvent.key` property from a keyboard event.\n\n<!-- toc -->\n\n- [Install](#install)\n- [Usage](#usage)\n  * [getKey()](#getkey)\n  * [getCode()](#getcode)\n- [Why?](#why)\n- [Locale Caveat](#locale-caveat)\n\n<!-- tocstop -->\n\n## Install\n\n```\nyarn add keyboard-key\n\n# or\n\nnpm install keyboard-key\n```\n\n## Usage\n\n### getKey()\n\nGet the `key` property value from an event.\n\n```js\ndocument.addEventListener('keydown', event => {\n  const key = keyboardKey.getKey(event)\n\n  switch (key) {\n    case 'Escape':\n      // handle escape key\n      break\n    default:\n      break\n  }\n})\n```\n\n>See [MDN][2] or the source for a full list of `key` values.\n\n### getCode()\n\nYou can also get the normalized `keyCode` from an event.  `keyboard-key` includes a hash of `key` names to `keyCode`s for easy comparisons:\n\n```js\ndocument.addEventListener('keydown', event => {\n  const code = keyboardKey.getCode(event)\n\n  switch (code) {\n    case keyboardKey.Escape: // 27\n      // handle escape key\n      break\n    default:\n      break\n  }\n})\n```\n\n## Why?\n\nMost previous key identifying KeyboardEvent properties have been pressed have been deprecated in favor of `Keyboard.key`.\n\n:-1: `KeyboardEvent.char`  \n:-1: `KeyboardEvent.charCode`  \n:-1: `KeyboardEvent.keyCode`  \n:-1: `KeyboardEvent.keyIdentifier`  \n:-1: `KeyboardEvent.keyLocation`  \n:-1: `KeyboardEvent.which`\n\n:+1: `KeyboardEvent.key`\n\nUnfortunately, `KeyboardEvent.key` does not yet have full [browser support][3].  Leaving the browsers without a reliable property for identifying keyboard event keys.\n\n## Locale Caveat\n\nThis utility interprets use of the shift key when inferring event `key` values.  Example, an event describing <kbd>shift</kbd>+<kbd>/</kbd> would result in a `key` value of <kbd>?</kbd>.  This logic assumes an `en-US` locale keyboard layout.  This will **not work** if you are using a different locale such as a German layout where <kbd>/</kbd> is <kbd>shift</kbd>+<kbd>7</kbd>. \n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n[3]: http://caniuse.com/#feat=keyboardevent-key\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/levithomason/keyboard-key.git"
  },
  "scripts": {
    "lint": "prettier --list-different \"**/*.js?(on|x)\" && eslint \"**/*.js?(on|x)\"",
    "lint:fix": "prettier --write \"**/*.js?(on|x)\" && eslint --fix \"**/*.js?(on|x)\"",
    "precommit": "yarn toc && lint-staged",
    "prerelease": "yarn lint && yarn test",
    "release:major": "yarn prerelease && ta-script npm/release major",
    "release:minor": "yarn prerelease && ta-script npm/release minor",
    "release:patch": "yarn prerelease && ta-script npm/release patch",
    "test": "jest",
    "test:watch": "yarn jest -- --watchAll",
    "toc": "markdown-toc -i README.md"
  },
  "version": "1.0.4"
}
