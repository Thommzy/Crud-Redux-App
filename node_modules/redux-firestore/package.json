{
  "_args": [
    [
      {
        "raw": "redux-firestore@^0.3.2",
        "scope": null,
        "escapedName": "redux-firestore",
        "name": "redux-firestore",
        "rawSpec": "^0.3.2",
        "spec": ">=0.3.2 <0.4.0",
        "type": "range"
      },
      "/Applications/XAMPP/xamppfiles/htdocs/revents"
    ]
  ],
  "_from": "redux-firestore@^0.3.2",
  "_hasShrinkwrap": false,
  "_id": "redux-firestore@0.3.2",
  "_location": "/redux-firestore",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/redux-firestore_0.3.2_1520236583417_0.6087481259182752"
  },
  "_npmUser": {
    "name": "prescottprue",
    "email": "sprue.dev@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-firestore@^0.3.2",
    "scope": null,
    "escapedName": "redux-firestore",
    "name": "redux-firestore",
    "rawSpec": "^0.3.2",
    "spec": ">=0.3.2 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-firestore/-/redux-firestore-0.3.2.tgz",
  "_shasum": "00342b958b757be77548f346d770a8bb3d912e4c",
  "_shrinkwrap": null,
  "_spec": "redux-firestore@^0.3.2",
  "_where": "/Applications/XAMPP/xamppfiles/htdocs/revents",
  "bugs": {
    "url": "https://github.com/prescottprue/redux-firestore/issues"
  },
  "dependencies": {
    "lodash": "^4.17.4",
    "prop-types": "^15.6.0"
  },
  "description": "Redux bindings for Firestore.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.1",
    "babel-loader": "^7.1.2",
    "babel-plugin-lodash": "^3.2.11",
    "babel-plugin-transform-async-to-generator": "^6.24.1",
    "babel-plugin-transform-inline-environment-variables": "^0.2.0",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-env": "^1.6.0",
    "babel-preset-react": "^6.24.1",
    "chai": "^4.1.2",
    "codecov": "^3.0.0",
    "cross-env": "^5.0.5",
    "eslint": "^3.15.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-config-prettier": "^2.9.0",
    "eslint-plugin-babel": "^4.1.2",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jsx-a11y": "^3.0.2",
    "eslint-plugin-prettier": "^2.6.0",
    "eslint-plugin-react": "^6.10.3",
    "husky": "^0.14.3",
    "istanbul": "1.1.0-alpha.1",
    "mocha": "^4.0.0",
    "prettier": "^1.10.2",
    "redux": "^3.7.2",
    "rimraf": "^2.6.2",
    "sinon": "^3.3.0",
    "sinon-chai": "^2.14.0",
    "webpack": "^3.11.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-kx/es6rrAXkZU6xJb0vLCqdDB1etvQ4NgL8WW8ODAd/+Ju4+8oXV1nrqOZtzElgmYRawZf6WJbeWoblz4RkrZA==",
    "shasum": "00342b958b757be77548f346d770a8bb3d912e4c",
    "tarball": "https://registry.npmjs.org/redux-firestore/-/redux-firestore-0.3.2.tgz",
    "fileCount": 62,
    "unpackedSize": 611372
  },
  "files": [
    "dist",
    "lib",
    "es",
    "src",
    "index.d.ts"
  ],
  "gitHead": "40489248992206638a7b0d07bb6b1c23c8bdb72c",
  "homepage": "https://github.com/prescottprue/redux-firestore#readme",
  "jsnext:main": "es/index.js",
  "keywords": [
    "firestore",
    "redux",
    "react-redux-firebase",
    "redux-firebase",
    "react-firebase"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "fej-snikduj",
      "email": "fej.snikduj@gmail.com"
    },
    {
      "name": "prescottprue",
      "email": "sprue.dev@gmail.com"
    },
    {
      "name": "reside-eng",
      "email": "eng@residenetwork.com"
    }
  ],
  "module": "es/index.js",
  "name": "redux-firestore",
  "npmFileMap": [
    {
      "basePath": "/dist/",
      "files": [
        "*.js"
      ]
    }
  ],
  "optionalDependencies": {},
  "readme": "# redux-firestore\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][npm-downloads-image]][npm-url]\n[![License][license-image]][license-url]\n[![Code Style][code-style-image]][code-style-url]\n[![Dependency Status][daviddm-image]][daviddm-url]\n[![Build Status][travis-image]][travis-url]\n[![Code Coverage][coverage-image]][coverage-url]\n\n[![Gitter][gitter-image]][gitter-url]\n<!-- [![Quality][quality-image]][quality-url] -->\n\n> Redux bindings for Firestore. Provides low-level API used in other libraries such as [react-redux-firebase](https://github.com/prescottprue/react-redux-firebase)\n\n## Installation\n\n```sh\nnpm install redux-firestore --save\n```\n\nThis assumes you are using [npm](https://www.npmjs.com/) as your package manager.\n\nIf you're not, you can access the library on [unpkg](https://unpkg.com/redux-firestore@latest/dist/redux-firestore.min.js), download it, or point your package manager to it. Theres more on this in the [Builds section below](#builds)\n\n## Complementary Package\n\nMost likely, you'll want react bindings, for that you will need [react-redux-firebase](https://github.com/prescottprue/react-redux-firebase). You can install the current version it by running:\n\n```sh\nnpm install --save react-redux-firebase\n```\n\n[react-redux-firebase](https://github.com/prescottprue/react-redux-firebase) provides [`withFirestore`](http://react-redux-firebase.com/docs/api/withFirestore.html) and [`firestoreConnect`](http://react-redux-firebase.com/docs/api/firestoreConnect.html) higher order components, which handle automatically calling `redux-firestore` internally based on component's lifecycle (i.e. mounting/un-mounting)\n\n## Use\n\n```javascript\nimport { createStore, combineReducers, compose } from 'redux'\nimport { reduxFirestore, firestoreReducer } from 'redux-firestore'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nconst firebaseConfig = {} // from Firebase Console\n\n// Initialize firebase instance\nfirebase.initializeApp(firebaseConfig)\n// Initialize Cloud Firestore through Firebase\nfirebase.firestore();\n\n// Add reduxFirestore store enhancer to store creator\nconst createStoreWithFirebase = compose(\n  reduxFirestore(firebase), // firebase instance as first argument\n)(createStore)\n\n// Add Firebase to reducers\nconst rootReducer = combineReducers({\n  firestore: firestoreReducer\n})\n\n// Create store with reducers and initial state\nconst initialState = {}\nconst store = createStoreWithFirebase(rootReducer, initialState)\n```\n\nThen pass store to your component's context using [react-redux's `Provider`](https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store):\n\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nrender(\n  <Provider store={store}>\n    <MyRootComponent />\n  </Provider>,\n  rootEl\n)\n```\n\n### Call Firestore\n\n#### Firestore Instance\n\n##### Functional Components\n\nIt is common to make react components \"functional\" meaning that the component is just a function instead of being a `class` which `extends React.Component`. This can be useful, but can limit usage of lifecycle hooks and other features of Component Classes. [`recompose` helps solve this](https://github.com/acdlite/recompose/blob/master/docs/API.md) by providing Higher Order Component functions such as `withContext`, `lifecycle`, and `withHandlers`.\n\n```js\nimport { connect } from 'react-redux'\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n  withContext,\n  getContext\n} from 'recompose'\n\nconst withStore = compose(\n  withContext({ store: PropTypes.object }, () => {}),\n  getContext({ store: PropTypes.object }),\n)\n\nconst enhance = compose(\n  withStore,\n  withHandlers({\n    loadData: props => () => props.store.firestore.get('todos'),\n    onDoneClick: props => (key, done = false) =>\n      props.store.firestore.update(`todos/${key}`, { done }),\n    onNewSubmit: props => newTodo =>\n      props.store.firestore.add('todos', { ...newTodo, owner: 'Anonymous' }),\n  }),\n  lifecycle({\n    componentWillMount(props) {\n      props.loadData()\n    }\n  }),\n  connect(({ firebase }) => ({ // state.firebase\n    todos: firebase.ordered.todos,\n  }))\n)\n\nexport default enhance(SomeComponent)\n```\n\nFor more information [on using recompose visit the docs](https://github.com/acdlite/recompose/blob/master/docs/API.md)\n\n##### Component Class\n\n```js\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { isEqual } from 'lodash'\nimport { watchEvents, unWatchEvents } from './actions/query'\nimport { getEventsFromInput, createCallable } from './utils'\n\nclass Todos extends Component {\n  static contextTypes = {\n    store: PropTypes.object.isRequired\n  }\n\n  componentWillMount () {\n    const { firestore } = this.context.store\n    firestore.get('todos')\n  }\n\n  render () {\n    return (\n      <div>\n        {\n          todos.map(todo => (\n            <div key={todo.id}>\n              {JSON.stringify(todo)}\n            </div>\n          ))\n        }\n      </div>\n    )\n  }\n}\n\nexport default connect((state) => ({\n  todos: state.firestore.ordered.todos\n}))(Todos)\n```\n\n#### Types of Queries\n\n##### get\n```js\nprops.store.firestore.get({ collection: 'cities' }),\n// store.firestore.get({ collection: 'cities', doc: 'SF' }), // doc\n```\n\n##### onSnapshot/setListener\n\n```js\nstore.firestore.onSnapshot({ collection: 'cities' }),\n// store.firestore.setListener({ collection: 'cities' }), // alias\n// store.firestore.setListener({ collection: 'cities', doc: 'SF' }), // doc\n```\n\n#### setListeners\n\n```js\nstore.firestore.setListeners([\n  { collection: 'cities' },\n  { collection: 'users' },\n]),\n```\n\n#### Query Options\n\n##### Collection\n```js\n{ collection: 'cities' },\n// or string equivalent\n// store.firestore.get('cities'),\n```\n\n##### Document\n\n```js\n{ collection: 'cities', doc: 'SF' },\n// or string equivalent\n// props.store.firestore.get('cities/SF'),\n```\n\n##### Sub Collections\n\n```js\n{ collection: 'cities', doc: 'SF', subcollections: [{ collection: 'zipcodes' }] },\n// or string equivalent\n// props.store.firestore.get('cities/SF'),\n```\n\n\n##### Where\n\nTo create a single `where` call, pass a single argument array to the `where` parameter:\n\n```js\n{\n  collection: 'cities',\n  where: ['state', '==', 'CA']\n},\n```\n\nMultiple `where` queries are as simple as passing multiple argument arrays (each one representing a `where` call):\n\n```js\n{\n  collection: 'cities',\n  where: [\n    ['state', '==', 'CA'],\n    ['population', '<', 100000]\n  ]\n},\n```\n\n*Should only be used with collections*\n\n##### orderBy\n\nTo create a single `orderBy` call, pass a single argument array to `orderBy`\n\n```js\n{\n  collection: 'cities',\n  orderBy: ['state'],\n  // orderBy: 'state' // string notation can also be used\n},\n```\n\nMultiple `orderBy`s are as simple as passing multiple argument arrays (each one representing a `orderBy` call)\n\n```js\n{\n  collection: 'cities',\n  orderBy: [\n    ['state'],\n    ['population', 'desc']\n  ]\n},\n```\n\n*Should only be used with collections*\n\n##### limit\n\nLimit the query to a certain number of results\n\n```js\n{\n  collection: 'cities',\n  limit: 10\n},\n```\n\n*Should only be used with collections*\n\n##### startAt\n\n> Creates a new query where the results start at the provided document (inclusive)\n\n[From Firebase's `startAt` docs](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference#startAt)\n\n```js\n{\n  collection: 'cities',\n  orderBy: 'population',\n  startAt: 1000000\n},\n```\n\n*Should only be used with collections*\n\n##### startAfter\n\n> Creates a new query where the results start after the provided document (exclusive)...\n\n[From Firebase's `startAfter` docs](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference#startAfter)\n\n```js\n{\n  collection: 'cities',\n  orderBy: 'population',\n  startAfter: 1000000\n},\n```\n\n*Should only be used with collections*\n\n##### endAt\n\n> Creates a new query where the results end at the provided document (inclusive)...\n\n[From Firebase's `endAt` docs](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference#endAt)\n\n\n```js\n{\n  collection: 'cities',\n  orderBy: 'population',\n  endAt: 1000000\n},\n```\n\n*Should only be used with collections*\n\n##### endBefore\n\n> Creates a new query where the results end before the provided document (exclusive) ...\n\n[From Firebase's `endBefore` docs](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference#endBefore)\n\n\n```js\n{\n  collection: 'cities',\n  orderBy: 'population',\n  endBefore: 1000000\n},\n```\n\n*Should only be used with collections*\n\n##### storeAs\n\nStoring data under a different path within redux is as easy as passing the `storeAs` parameter to your query:\n\n```js\n{\n  collection: 'cities',\n  where: ['state', '==', 'CA'],\n  storeAs: 'caliCities' // store data in redux under this path instead of \"cities\"\n},\n```\n\n**NOTE:** Not yet supported inside of subcollections (only at the top level)\n\n\n#### Other Firebase Statics\n\nOther Firebase statics (such as [FieldValue](https://firebase.google.com/docs/reference/js/firebase.firestore.FieldValue)) are available through the firestore instance:\n\n```js\nimport { connect } from 'react-redux'\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n  withContext,\n  getContext\n} from 'recompose'\n\nconst withFirestore = compose(\n  withContext({ store: PropTypes.object }, () => {}),\n  getContext({ store: PropTypes.object }),\n)\n\nconst enhance = compose(\n  withStore,\n  withHandlers({\n    onDoneClick: props => (key, done = true) => {\n      const { firestore } = props.store\n      return firestore.update(`todos/${key}`, {\n        done,\n        updatedAt: firestore.FieldValue.serverTimestamp() // use static from firestore instance\n      }),\n    }\n  })\n)\n\nexport default enhance(SomeComponent)\n```\n\n## Config Options\n\n#### enableLogging\nDefault: `false`\n\nWhether or not to enable Firebase client logging.\n\n#### logListenerError\nDefault: `true`\n\nWhether or not to use `console.error` to log listener error objects. Errors from listeners are helpful to developers on multiple occasions including when index needs to be added.\n\n#### enhancerNamespace\nDefault: `'firestore'`\n\nNamespace under which enhancer places internal instance on redux store (i.e. `store.firestore`).\n\n#### allowMultipleListeners\nDefault: `false`\n\nWhether or not to allow multiple listeners to be attached for the same query. If a function is passed the arguments it receives are `listenerToAttach`, `currentListeners`, and the function should return a boolean.\n\n#### preserveOnDelete\nDefault: `null`\n\nValues to preserve from state when DELETE_SUCCESS action is dispatched. Note that this will not prevent the LISTENER_RESPONSE action from removing items from state.ordered if you have a listener attached.\n\n#### preserveOnListenerError\nDefault: `null`\n\nValues to preserve from state when LISTENER_ERROR action is dispatched.\n\n#### onAttemptCollectionDelete\nDefault: `null`\n\nArguments:`(queryOption, dispatch, firebase)`\n\nFunction run when attempting to delete a collection. If not provided (default) delete promise will be rejected with \"Only documents can be deleted\" unless. This is due to the fact that Collections can not be deleted from a client, it should instead be handled within a cloud function (which can be called by providing a promise to `onAttemptCollectionDelete` that calls the cloud function).\n\n#### mergeOrdered\nDefault: `true`\n\nWhether or not to merge data within `orderedReducer`.\n\n#### mergeOrderedDocUpdate\nDefault: `true`\n\nWhether or not to merge data from document listener updates within `orderedReducer`.\n\n\n#### mergeOrderedCollectionUpdates\nDefault: `true`\n\nWhether or not to merge data from collection listener updates within `orderedReducer`.\n\n<!-- #### Middleware\n\n`redux-firestore`'s enhancer offers a new middleware setup that was not offered in `react-redux-firebase` (but will eventually make it `redux-firebase`)\n**Note**: This syntax is just a sample and is not currently released\n\n##### Setup\n```js\n```\n\n\n##### Usage\n\n```js\nimport { FIREBASE_CALL } from 'redux-firestore'\n\ndispatch({\n  type: FIREBASE_CALL,\n  collection: 'users', // only used when namespace is firestore\n  method:  'get' // get method\n})\n```\n\nSome of the goals behind this approach include:\n\n1. Not needing to pass around a Firebase instance (with `react-redux-firebase` this meant using `firebaseConnect` HOC or `getFirebase`)\n2. Follows [patterns outlined in the redux docs for data fetching](http://redux.js.org/docs/advanced/ExampleRedditAPI.html)\n3. Easier to expand/change internal API as Firebase/Firestore API grows & changes -->\n\n## Builds\n\nMost commonly people consume Redux Firestore as a [CommonJS module](http://webpack.github.io/docs/commonjs.html). This module is what you get when you import redux in a Webpack, Browserify, or a Node environment.\n\nIf you don't use a module bundler, it's also fine. The redux-firestore npm package includes precompiled production and development [UMD builds](https://github.com/umdjs/umd) in the [dist folder](https://unpkg.com/redux-firestore@latest/dist/). They can be used directly without a bundler and are thus compatible with many popular JavaScript module loaders and environments. For example, you can drop a UMD build as a `<script>` tag on the page. The UMD builds make Redux Firestore available as a `window.ReduxFirestore` global variable.\n\nIt can be imported like so:\n\n```html\n<script src=\"../node_modules/redux-firestore/dist/redux-firestore.min.js\"></script>\n<!-- or through cdn: <script src=\"https://unpkg.com/redux-firestore@latest/dist/redux-firestore.min.js\"></script> -->\n<script>console.log('redux firestore:', window.ReduxFirestore)</script>\n```\n\nNote: In an effort to keep things simple, the wording from this explanation was modeled after [the installation section of the Redux Docs](https://redux.js.org/#installation).\n\n## Applications Using This\n* [fireadmin.io](http://fireadmin.io) - Firebase Instance Management Tool (source [available here](https://github.com/prescottprue/fireadmin))\n\n## FAQ\n1. How do I update a document within a subcollection?\n\n    Provide `subcollections` config the same way you do while querying:\n\n    ```js\n    props.firestore.update(\n      {\n        collection: 'cities',\n        doc: 'SF',\n        subcollections: [{ collection: 'counties', doc: 'San Mateo' }],\n      },\n      { some: 'changes' }\n    );\n    ```\n\n1. How do I get auth state in redux?\n\n    You will most likely want to use [`react-redux-firebase`](https://github.com/prescottprue/react-redux-firebase) or another redux/firebase connector. For more information please visit the [complementary package section](#complementary-package).\n\n1. Are there Higher Order Components for use with React?\n\n    [`react-redux-firebase`](https://github.com/prescottprue/react-redux-firebase) contains `firebaseConnect`, `firestoreConnect`, `withFirebase` and `withFirestore` HOCs. For more information please visit the [complementary package section](#complementary-package).\n\n## Roadmap\n\n* Automatic support for documents that have a parameter and a subcollection with the same name (currently requires `storeAs`)\n* Support for Passing a Ref to `setListener` in place of `queryConfig` object or string\n\nPost an issue with a feature suggestion if you have any ideas!\n\n[npm-image]: https://img.shields.io/npm/v/redux-firestore.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/redux-firestore\n[npm-downloads-image]: https://img.shields.io/npm/dm/redux-firestore.svg?style=flat-square\n[quality-image]: http://npm.packagequality.com/shield/redux-firestore.svg?style=flat-square\n[quality-url]: https://packagequality.com/#?package=redux-firestore\n[travis-image]: https://img.shields.io/travis/prescottprue/redux-firestore/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/prescottprue/redux-firestore\n[daviddm-image]: https://img.shields.io/david/prescottprue/redux-firestore.svg?style=flat-square\n[daviddm-url]: https://david-dm.org/prescottprue/redux-firestore\n[climate-image]: https://img.shields.io/codeclimate/github/prescottprue/redux-firestore.svg?style=flat-square\n[climate-url]: https://codeclimate.com/github/prescottprue/redux-firestore\n[coverage-image]: https://img.shields.io/codecov/c/github/prescottprue/redux-firestore.svg?style=flat-square\n[coverage-url]: https://codecov.io/gh/prescottprue/redux-firestore\n[license-image]: https://img.shields.io/npm/l/redux-firestore.svg?style=flat-square\n[license-url]: https://github.com/prescottprue/redux-firestore/blob/master/LICENSE\n[code-style-image]: https://img.shields.io/badge/code%20style-airbnb-blue.svg?style=flat-square\n[code-style-url]: https://github.com/airbnb/javascript\n[gitter-image]: https://img.shields.io/gitter/room/redux-firestore/gitter.svg?style=flat-square\n[gitter-url]: https://gitter.im/redux-firestore/Lobby\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prescottprue/redux-firestore.git"
  },
  "scripts": {
    "build": "npm run build:commonjs && npm run build:es && npm run build:umd && npm run build:umd:min",
    "build:commonjs": "cross-env BABEL_ENV=commonjs babel src --out-dir lib",
    "build:es": "cross-env BABEL_ENV=es babel src --out-dir es",
    "build:umd": "cross-env BABEL_ENV=commonjs NODE_ENV=development webpack",
    "build:umd:min": "cross-env BABEL_ENV=commonjs NODE_ENV=production webpack",
    "clean": "rimraf lib dist",
    "codecov": "cat coverage/lcov.info | codecov",
    "format": "prettier --write \"src/**/*.js\" \"test/**/*.js\"",
    "lint": "eslint .",
    "lint:fix": "npm run lint -- --fix",
    "prepare": "npm run clean && npm run build",
    "prepush": "npm run lint",
    "preversion": "npm run clean && npm run build",
    "test": "mocha -R spec ./test/unit/**",
    "test:cov": "istanbul cover ./node_modules/mocha/bin/_mocha ./test/unit/**",
    "watch": "npm run build:es -- --watch"
  },
  "typings": "./index.d.ts",
  "unpkg": "dist/redux-firestore.min.js",
  "version": "0.3.2"
}
