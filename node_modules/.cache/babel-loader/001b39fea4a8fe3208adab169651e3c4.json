{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventForm/EventForm.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { Segment, Form, Button, Grid, Header } from \"semantic-ui-react\";\nimport { createEvent, updateEvent } from \"../eventActions\";\nimport cuid from \"cuid\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TestArea from \"../../../app/common/form/TestArea\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nconst mapState = (state, ownProps) => {\n  const eventId = ownProps.match.params.id;\n  let event = {};\n\n  if (eventId && state.events.length > 0) {\n    event = state.events.filter(event => event.id === eventId)[0];\n  }\n\n  return {\n    initialValues: event\n  };\n};\n\nconst actions = {\n  createEvent,\n  updateEvent\n};\nconst category = [{\n  key: \"drinks\",\n  text: \"Drinks\",\n  value: \"drinks\"\n}, {\n  key: \"culture\",\n  text: \"Culture\",\n  value: \"culture\"\n}, {\n  key: \"film\",\n  text: \"Film\",\n  value: \"film\"\n}, {\n  key: \"food\",\n  text: \"Food\",\n  value: \"food\"\n}, {\n  key: \"music\",\n  text: \"Music\",\n  value: \"music\"\n}, {\n  key: \"travel\",\n  text: \"Travel\",\n  value: \"travel\"\n}];\n\nclass EventForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onFormSubmit = values => {// console.log(values);\n      // // evt.preventDefault();\n      // // if (this.state.id) {\n      // //   this.props.updateEvent(this.state);\n      // //   this.props.history.push(`/events/${this.state.id}`);\n      // // } else {\n      // //   const newEvent = {\n      // //     ...this.state,\n      // //     id: cuid(),\n      // //     hostPhotoURL: \"./assets/user.png\"\n      // //   };\n      // //   this.props.createEvent(newEvent);\n      // //   this.props.history.push(`/events`);\n      // // }\n    };\n  }\n\n  render() {\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Header, {\n      sub: true,\n      color: \"teal\",\n      content: \"Event Details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Form, {\n      onSubmit: this.props.handleSubmit(this.onFormSubmit),\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: TextInput,\n      placeholder: \"Give Your Event a Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"category\",\n      component: SelectInput,\n      options: category,\n      placeholder: \"What is Your Event About\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: TestArea,\n      rows: 3,\n      placeholder: \"Tell us about your event\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Header, {\n      sub: true,\n      color: \"teal\",\n      content: \"Event Details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"city\",\n      component: TextInput,\n      placeholder: \"Event City\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"venue\",\n      component: TextInput,\n      placeholder: \"Event Venue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"date\",\n      component: TextInput,\n      placeholder: \"Event Date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Button, {\n      positive: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Button, {\n      onClick: this.props.history.goBack,\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n}\n\nexport default connect(mapState, actions)(reduxForm({\n  form: \"eventForm\"\n})(EventForm));","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventForm/EventForm.jsx"],"names":["React","Component","connect","reduxForm","Field","Segment","Form","Button","Grid","Header","createEvent","updateEvent","cuid","TextInput","TestArea","SelectInput","mapState","state","ownProps","eventId","match","params","id","event","events","length","filter","initialValues","actions","category","key","text","value","EventForm","onFormSubmit","values","render","props","handleSubmit","history","goBack","form"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { Segment, Form, Button, Grid, Header } from \"semantic-ui-react\";\nimport { createEvent, updateEvent } from \"../eventActions\";\nimport cuid from \"cuid\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TestArea from \"../../../app/common/form/TestArea\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\n\nconst mapState = (state, ownProps) => {\n  const eventId = ownProps.match.params.id;\n\n  let event = {};\n\n  if (eventId && state.events.length > 0) {\n    event = state.events.filter(event => event.id === eventId)[0];\n  }\n  return {\n    initialValues: event\n  };\n};\n\nconst actions = {\n  createEvent,\n  updateEvent\n};\n\nconst category = [\n  { key: \"drinks\", text: \"Drinks\", value: \"drinks\" },\n  { key: \"culture\", text: \"Culture\", value: \"culture\" },\n  { key: \"film\", text: \"Film\", value: \"film\" },\n  { key: \"food\", text: \"Food\", value: \"food\" },\n  { key: \"music\", text: \"Music\", value: \"music\" },\n  { key: \"travel\", text: \"Travel\", value: \"travel\" }\n];\nclass EventForm extends Component {\n  onFormSubmit = values => {\n    // console.log(values);\n    // // evt.preventDefault();\n    // // if (this.state.id) {\n    // //   this.props.updateEvent(this.state);\n    // //   this.props.history.push(`/events/${this.state.id}`);\n    // // } else {\n    // //   const newEvent = {\n    // //     ...this.state,\n    // //     id: cuid(),\n    // //     hostPhotoURL: \"./assets/user.png\"\n    // //   };\n    // //   this.props.createEvent(newEvent);\n    // //   this.props.history.push(`/events`);\n    // // }\n  };\n\n  render() {\n    return (\n      <Grid>\n        <Grid.Column width={10}>\n          <Segment>\n            <Header sub color='teal' content='Event Details' />\n            <Form\n              onSubmit={this.props.handleSubmit(this.onFormSubmit)}\n              autoComplete='off'\n            >\n              <Field\n                name='title'\n                component={TextInput}\n                placeholder='Give Your Event a Name'\n              />\n              <Field\n                name='category'\n                component={SelectInput}\n                options={category}\n                placeholder='What is Your Event About'\n              />\n              <Field\n                name='description'\n                component={TestArea}\n                rows={3}\n                placeholder='Tell us about your event'\n              />\n              <Header sub color='teal' content='Event Details' />\n              <Field\n                name='city'\n                component={TextInput}\n                placeholder='Event City'\n              />\n              <Field\n                name='venue'\n                component={TextInput}\n                placeholder='Event Venue'\n              />\n              <Field\n                name='date'\n                component={TextInput}\n                placeholder='Event Date'\n              />\n              <Button positive type='submit'>\n                Submit\n              </Button>\n              <Button onClick={this.props.history.goBack} type='button'>\n                Cancel\n              </Button>\n            </Form>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default connect(\n  mapState,\n  actions\n)(reduxForm({ form: \"eventForm\" })(EventForm));\n"]},"metadata":{},"sourceType":"module"}