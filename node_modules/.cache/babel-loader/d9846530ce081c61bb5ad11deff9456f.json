{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventForm/EventForm.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { Segment, Form, Button, Grid } from \"semantic-ui-react\";\nimport { createEvent, updateEvent } from \"../eventActions\";\nimport cuid from \"cuid\";\nimport TextInput from \"../../../app/common/form/TextInput\";\n\nconst mapState = (state, ownProps) => {\n  const eventId = ownProps.match.params.id;\n  let event = {\n    title: \"\",\n    date: \"\",\n    city: \"\",\n    venue: \"\",\n    hostedBy: \"\"\n  };\n\n  if (eventId && state.events.length > 0) {\n    event = state.events.filter(event => event.id === eventId)[0];\n  }\n\n  return {\n    event\n  };\n};\n\nconst actions = {\n  createEvent,\n  updateEvent\n};\n\nclass EventForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = _objectSpread({}, this.props.event);\n\n    this.handleSubmitForm = evt => {\n      evt.preventDefault();\n\n      if (this.state.id) {\n        this.props.updateEvent(this.state);\n        this.props.history.push(\"/events/\".concat(this.state.id));\n      } else {\n        const newEvent = _objectSpread({}, this.state, {\n          id: cuid(),\n          hostPhotoURL: \"./assets/user.png\"\n        });\n\n        this.props.createEvent(newEvent);\n        this.props.history.push(\"/events\");\n      }\n    };\n\n    this.handleInputChange = ({\n      target: {\n        name,\n        value\n      }\n    }) => {\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.selectedEvent != null) {\n      this.setState(_objectSpread({}, this.props.selectedEvent));\n    }\n  }\n\n  render() {\n    // const { cancelFormOpen } = this.props;\n    const _this$state = this.state,\n          title = _this$state.title,\n          date = _this$state.date,\n          city = _this$state.city,\n          venue = _this$state.venue,\n          hostedBy = _this$state.hostedBy;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(mapState, actions)(reduxForm({\n  form: \"eventForm\"\n})(EventForm));","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventForm/EventForm.jsx"],"names":["React","Component","connect","reduxForm","Field","Segment","Form","Button","Grid","createEvent","updateEvent","cuid","TextInput","mapState","state","ownProps","eventId","match","params","id","event","title","date","city","venue","hostedBy","events","length","filter","actions","EventForm","props","handleSubmitForm","evt","preventDefault","history","push","newEvent","hostPhotoURL","handleInputChange","target","name","value","setState","componentDidMount","selectedEvent","render","form"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { Segment, Form, Button, Grid } from \"semantic-ui-react\";\nimport { createEvent, updateEvent } from \"../eventActions\";\nimport cuid from \"cuid\";\nimport TextInput from \"../../../app/common/form/TextInput\";\n\nconst mapState = (state, ownProps) => {\n  const eventId = ownProps.match.params.id;\n\n  let event = {\n    title: \"\",\n    date: \"\",\n    city: \"\",\n    venue: \"\",\n    hostedBy: \"\"\n  };\n\n  if (eventId && state.events.length > 0) {\n    event = state.events.filter(event => event.id === eventId)[0];\n  }\n  return {\n    event\n  };\n};\n\nconst actions = {\n  createEvent,\n  updateEvent\n};\n\nclass EventForm extends Component {\n  state = { ...this.props.event };\n\n  componentDidMount() {\n    if (this.props.selectedEvent != null) {\n      this.setState({\n        ...this.props.selectedEvent\n      });\n    }\n  }\n\n  handleSubmitForm = evt => {\n    evt.preventDefault();\n    if (this.state.id) {\n      this.props.updateEvent(this.state);\n      this.props.history.push(`/events/${this.state.id}`);\n    } else {\n      const newEvent = {\n        ...this.state,\n        id: cuid(),\n        hostPhotoURL: \"./assets/user.png\"\n      };\n      this.props.createEvent(newEvent);\n      this.props.history.push(`/events`);\n    }\n  };\n\n  handleInputChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value\n    });\n  };\n  render() {\n    // const { cancelFormOpen } = this.props;\n    const { title, date, city, venue, hostedBy } = this.state;\n    return (\n      <Grid>\n        <Grid.Column width={10}>\n\n        </Grid.Column>\n      </Grid>\n     \n    );\n  }\n}\n\nexport default connect(\n  mapState,\n  actions\n)(reduxForm({ form: \"eventForm\" })(EventForm));\n"]},"metadata":{},"sourceType":"module"}