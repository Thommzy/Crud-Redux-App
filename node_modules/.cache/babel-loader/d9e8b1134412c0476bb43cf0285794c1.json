{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventDashboard/EventDashboard.jsx\";\nimport React, { Component } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport EventList from \"../EventList/EventList\";\nimport EventForm from \"../EventForm/EventForm\";\nimport cuid from \"cuid\";\nimport { createEvent, deleteEvent, updateEvent } from \"../eventActions\";\n\nconst mapState = state => ({\n  events: state.events\n});\n\nconst actions = {\n  createEvent,\n  deleteEvent,\n  updateEvent\n};\n\nclass EventDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: false,\n      selectedEvent: null\n    };\n\n    this.handleCreateFormOpen = () => {\n      this.setState({\n        isOpen: true,\n        selectedEvent: null\n      });\n    };\n\n    this.handleCreateEvent = newEvent => {\n      newEvent.id = cuid();\n      newEvent.hostPhotoURL = \"./assets/user.png\";\n      this.props.createEvent(newEvent);\n      this.setState(({\n        events\n      }) => ({\n        isOpen: false\n      }));\n    };\n\n    this.handleSelectEvent = (evt, event) => {\n      console.log(evt);\n      console.log(event);\n      this.setState({\n        selectedEvent: event,\n        isOpen: true\n      });\n    };\n\n    this.handleUpdateEvent = updatedEvent => {\n      this.props.updateEvent(updatedEvent);\n      this.setState(({\n        events\n      }) => ({\n        isOpen: false,\n        selectedEvent: null\n      }));\n    };\n\n    this.handleDeleteEvent = id => {\n      this.props.deleteEvent(id);\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isOpen = _this$state.isOpen,\n          selectedEvent = _this$state.selectedEvent;\n    const events = this.props.events;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      deleteEvent: this.handleDeleteEvent,\n      events: events,\n      selectEvent: this.handleSelectEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleCreateFormOpen,\n      positive: true,\n      content: \"Create Event\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), isOpen && React.createElement(EventForm, {\n      key: selectedEvent ? selectedEvent.id : 0,\n      updateEvent: this.handleUpdateEvent,\n      selectedEvent: selectedEvent,\n      createEvent: this.handleCreateEvent,\n      cancelFormOpen: this.handleFormCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(mapState, actions)(EventDashboard);","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventDashboard/EventDashboard.jsx"],"names":["React","Component","Grid","Button","connect","EventList","EventForm","cuid","createEvent","deleteEvent","updateEvent","mapState","state","events","actions","EventDashboard","isOpen","selectedEvent","handleCreateFormOpen","setState","handleCreateEvent","newEvent","id","hostPhotoURL","props","handleSelectEvent","evt","event","console","log","handleUpdateEvent","updatedEvent","handleDeleteEvent","render","handleFormCancel"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport EventList from \"../EventList/EventList\";\nimport EventForm from \"../EventForm/EventForm\";\nimport cuid from \"cuid\";\nimport { createEvent, deleteEvent, updateEvent } from \"../eventActions\";\n\nconst mapState = state => ({\n  events: state.events\n});\n\nconst actions = {\n  createEvent,\n  deleteEvent,\n  updateEvent\n};\n\nclass EventDashboard extends Component {\n  state = {\n    isOpen: false,\n    selectedEvent: null\n  };\n\n  // handleIsOpenToggle = () => {\n  //   this.setState(({ isOpen }) => ({\n  //     isOpen: !isOpen\n  //   }));\n  // };\n\n  handleCreateFormOpen = () => {\n    this.setState({\n      isOpen: true,\n      selectedEvent: null\n    });\n  };\n\n  // handleFormCancel = () => {\n  //   this.setState({\n  //     isOpen: false\n  //   });\n  // };\n\n  handleCreateEvent = newEvent => {\n    newEvent.id = cuid();\n    newEvent.hostPhotoURL = \"./assets/user.png\";\n    this.props.createEvent(newEvent);\n    this.setState(({ events }) => ({\n      isOpen: false\n    }));\n  };\n\n  handleSelectEvent = (evt, event) => {\n    console.log(evt);\n    console.log(event);\n    this.setState({\n      selectedEvent: event,\n      isOpen: true\n    });\n  };\n\n  handleUpdateEvent = updatedEvent => {\n    this.props.updateEvent(updatedEvent);\n    this.setState(({ events }) => ({\n      isOpen: false,\n      selectedEvent: null\n    }));\n  };\n\n  handleDeleteEvent = id => {\n    this.props.deleteEvent(id);\n  };\n\n  render() {\n    const { isOpen, selectedEvent } = this.state;\n    const { events } = this.props;\n    return (\n      <Grid>\n        <Grid.Column width={10}>\n          <EventList\n            deleteEvent={this.handleDeleteEvent}\n            events={events}\n            selectEvent={this.handleSelectEvent}\n          />\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <Button\n            onClick={this.handleCreateFormOpen}\n            positive\n            content='Create Event'\n          />\n          {isOpen && (\n            <EventForm\n              key={selectedEvent ? selectedEvent.id : 0}\n              updateEvent={this.handleUpdateEvent}\n              selectedEvent={selectedEvent}\n              createEvent={this.handleCreateEvent}\n              cancelFormOpen={this.handleFormCancel}\n            />\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default connect(\n  mapState,\n  actions\n)(EventDashboard);\n"]},"metadata":{},"sourceType":"module"}