{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/app/common/form/TestArea.jsx\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\nconst TestArea = ({\n  input,\n  rows,\n  width,\n  type,\n  placeholder,\n  meta: {\n    touched,\n    error\n  }\n}) => {\n  return React.createElement(Form.Field, {\n    error: touched && !!error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"textarea\", Object.assign({}, input, {\n    placeholder: placeholder,\n    type: type,\n    rows: rows,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  })), touched && error && React.createElement(Label, {\n    basic: true,\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, error));\n};\n\nexport default TestArea;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/app/common/form/TestArea.jsx"],"names":["React","Form","Label","TestArea","input","rows","width","type","placeholder","meta","touched","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,mBAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,KADgB;AAEhBC,EAAAA,IAFgB;AAGhBC,EAAAA,KAHgB;AAIhBC,EAAAA,IAJgB;AAKhBC,EAAAA,WALgB;AAMhBC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX;AANU,CAAD,KAOX;AACJ,SACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,KAAK,EAAED,OAAO,IAAI,CAAC,CAACC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,kDAAcP,KAAd;AAAqB,IAAA,WAAW,EAAEI,WAAlC;AAA+C,IAAA,IAAI,EAAED,IAArD;AAA2D,IAAA,IAAI,EAAEF,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEGK,OAAO,IAAIC,KAAX,IACC,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,KAAK,EAAC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KADH,CAHJ,CADF;AAUD,CAlBD;;AAoBA,eAAeR,QAAf","sourcesContent":["import React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\nconst TestArea = ({\n  input,\n  rows,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error}>\n      <textarea {...input} placeholder={placeholder} type={type} rows={rows} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TestArea;\n"]},"metadata":{},"sourceType":"module"}