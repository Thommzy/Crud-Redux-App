{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventForm/EventForm.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Segment, Form, Button } from \"semantic-ui-react\";\nimport { createEvent, updateEvents } from \"../eventActions\";\n\nconst mapState = (state, ownProps) => {\n  const eventId = ownProps.match.params.id;\n  let event = {\n    title: \"\",\n    date: \"\",\n    city: \"\",\n    venue: \"\",\n    hostedBy: \"\"\n  };\n\n  if (eventId && state.events.length > 0) {\n    event = state.events.filter(event => event.id === eventId)[0];\n  }\n\n  return {\n    event\n  };\n};\n\nconst actions = {\n  createEvent,\n  updateEvents\n};\n\nclass EventForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = _objectSpread({}, this.props.event);\n\n    this.handleSubmitForm = evt => {\n      evt.preventDefault();\n\n      if (this.state.id) {\n        this.props.updateEvent(this.state);\n      } else {\n        const newEvent = _objectSpread({}, this.sat);\n\n        this.props.createEvent(this.state);\n      }\n    };\n\n    this.handleInputChange = ({\n      target: {\n        name,\n        value\n      }\n    }) => {\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.selectedEvent != null) {\n      this.setState(_objectSpread({}, this.props.selectedEvent));\n    }\n  }\n\n  render() {\n    // const { cancelFormOpen } = this.props;\n    const _this$state = this.state,\n          title = _this$state.title,\n          date = _this$state.date,\n          city = _this$state.city,\n          venue = _this$state.venue,\n          hostedBy = _this$state.hostedBy;\n    return React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmitForm,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Event Title\"), React.createElement(\"input\", {\n      name: \"title\",\n      onChange: this.handleInputChange,\n      value: title,\n      placeholder: \"Event Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Event Date\"), React.createElement(\"input\", {\n      name: \"date\",\n      onChange: this.handleInputChange,\n      value: date,\n      type: \"date\",\n      placeholder: \"Event Date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"City\"), React.createElement(\"input\", {\n      name: \"city\",\n      onChange: this.handleInputChange,\n      value: city,\n      placeholder: \"City event is taking place\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Venue\"), React.createElement(\"input\", {\n      name: \"venue\",\n      onChange: this.handleInputChange,\n      value: venue,\n      placeholder: \"Enter the Venue of the event\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Hosted By\"), React.createElement(\"input\", {\n      name: \"hostedBy\",\n      onChange: this.handleInputChange,\n      value: hostedBy,\n      placeholder: \"Enter the name of person hosting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(Button, {\n      positive: true,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Button, {\n      onClick: this.props.history.goBack,\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Cancel\")));\n  }\n\n}\n\nexport default connect(mapState, actions)(EventForm);","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventForm/EventForm.jsx"],"names":["React","Component","connect","Segment","Form","Button","createEvent","updateEvents","mapState","state","ownProps","eventId","match","params","id","event","title","date","city","venue","hostedBy","events","length","filter","actions","EventForm","props","handleSubmitForm","evt","preventDefault","updateEvent","newEvent","sat","handleInputChange","target","name","value","setState","componentDidMount","selectedEvent","render","history","goBack"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Segment, Form, Button } from \"semantic-ui-react\";\nimport { createEvent, updateEvents } from \"../eventActions\";\n\nconst mapState = (state, ownProps) => {\n  const eventId = ownProps.match.params.id;\n\n  let event = {\n    title: \"\",\n    date: \"\",\n    city: \"\",\n    venue: \"\",\n    hostedBy: \"\"\n  };\n\n  if (eventId && state.events.length > 0) {\n    event = state.events.filter(event => event.id === eventId)[0];\n  }\n  return {\n    event\n  };\n};\n\nconst actions = {\n  createEvent,\n  updateEvents\n};\n\nclass EventForm extends Component {\n  state = { ...this.props.event };\n\n  componentDidMount() {\n    if (this.props.selectedEvent != null) {\n      this.setState({\n        ...this.props.selectedEvent\n      });\n    }\n  }\n\n  handleSubmitForm = evt => {\n    evt.preventDefault();\n    if (this.state.id) {\n      this.props.updateEvent(this.state);\n    } else {\n      const newEvent ={\n        ...this.sat\n      }\n      this.props.createEvent(this.state);\n    }\n  };\n\n  handleInputChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value\n    });\n  };\n  render() {\n    // const { cancelFormOpen } = this.props;\n    const { title, date, city, venue, hostedBy } = this.state;\n    return (\n      <Segment>\n        <Form onSubmit={this.handleSubmitForm} autoComplete='off'>\n          <Form.Field>\n            <label>Event Title</label>\n            <input\n              name='title'\n              onChange={this.handleInputChange}\n              value={title}\n              placeholder='Event Title'\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Event Date</label>\n            <input\n              name='date'\n              onChange={this.handleInputChange}\n              value={date}\n              type='date'\n              placeholder='Event Date'\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>City</label>\n            <input\n              name='city'\n              onChange={this.handleInputChange}\n              value={city}\n              placeholder='City event is taking place'\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Venue</label>\n            <input\n              name='venue'\n              onChange={this.handleInputChange}\n              value={venue}\n              placeholder='Enter the Venue of the event'\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Hosted By</label>\n            <input\n              name='hostedBy'\n              onChange={this.handleInputChange}\n              value={hostedBy}\n              placeholder='Enter the name of person hosting'\n            />\n          </Form.Field>\n          <Button positive type='submit'>\n            Submit\n          </Button>\n          <Button onClick={this.props.history.goBack} type='button'>\n            Cancel\n          </Button>\n        </Form>\n      </Segment>\n    );\n  }\n}\n\nexport default connect(\n  mapState,\n  actions\n)(EventForm);\n"]},"metadata":{},"sourceType":"module"}