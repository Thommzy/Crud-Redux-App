{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventDashboard/EventDashboard.jsx\";\nimport React, { Component } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport EventList from \"../EventList/EventList\";\nimport EventForm from \"../EventForm/EventForm\";\nimport cuid from \"cuid\";\nconst eventsFromDashboard = [{\n  id: \"1\",\n  title: \"Trip to Tower of London\",\n  date: \"2018-03-27\",\n  category: \"culture\",\n  description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\n  city: \"London, UK\",\n  venue: \"Tower of London, St Katharine's & Wapping, London\",\n  hostedBy: \"Bob\",\n  hostPhotoURL: \"https://randomuser.me/api/portraits/men/20.jpg\",\n  attendees: [{\n    id: \"a\",\n    name: \"Bob\",\n    photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\n  }, {\n    id: \"b\",\n    name: \"Tom\",\n    photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\n  }]\n}, {\n  id: \"2\",\n  title: \"Trip to Punch and Judy Pub\",\n  date: \"2018-03-28\",\n  category: \"drinks\",\n  description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\n  city: \"London, UK\",\n  venue: \"Punch & Judy, Henrietta Street, London, UK\",\n  hostedBy: \"Tom\",\n  hostPhotoURL: \"https://randomuser.me/api/portraits/men/22.jpg\",\n  attendees: [{\n    id: \"b\",\n    name: \"Tom\",\n    photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\n  }, {\n    id: \"a\",\n    name: \"Bob\",\n    photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\n  }]\n}];\n\nclass EventDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: eventsFromDashboard,\n      isOpen: false,\n      selectedEvent: null\n    };\n\n    this.handleCreateFormOpen = () => {\n      this.setState({\n        isOpen: true,\n        selectedEvent: null\n      });\n    };\n\n    this.handleFormCancel = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.handleCreateEvent = newEvent => {\n      newEvent.id = cuid();\n      newEvent.hostPhotoURL = \"./assets/user.png\";\n      this.setState(({\n        events\n      }) => ({\n        events: [...events, newEvent],\n        isOpen: false\n      }));\n    };\n\n    this.handleSelectEvent = (evt, event) => {\n      console.log(evt);\n      console.log(event);\n      this.setState({\n        selectedEvent: event,\n        isOpen: true\n      });\n    };\n\n    this.handleUpdateEvent = updatedEvent => {\n      this.setState(({\n        events\n      }) => ({\n        events: events.map(event => {\n          if (event.id === updatedEvent.id) {\n            return _objectSpread({}, updatedEvent);\n          } else {\n            return event;\n          }\n        })\n      }));\n    };\n\n    this.handleDeleteEvent = id => {\n      this.setState(({\n        events\n      }) => ({\n        events: events.filter(e => e.id !== id)\n      }));\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          events = _this$state.events,\n          isOpen = _this$state.isOpen,\n          selectedEvent = _this$state.selectedEvent;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      deleteEvent: this.handleDeleteEvent,\n      events: events,\n      selectEvent: this.handleSelectEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleCreateFormOpen,\n      positive: true,\n      content: \"Create Event\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), isOpen && React.createElement(EventForm, {\n      key: selectedEvent ? selectedEvent.id : 0,\n      updateEvent: this.handleUpdateEvent,\n      selectedEvent: selectedEvent,\n      createEvent: this.handleCreateEvent,\n      cancelFormOpen: this.handleFormCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default EventDashboard;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/Crud-Redux-App/src/Features/Event/EventDashboard/EventDashboard.jsx"],"names":["React","Component","Grid","Button","EventList","EventForm","cuid","eventsFromDashboard","id","title","date","category","description","city","venue","hostedBy","hostPhotoURL","attendees","name","photoURL","EventDashboard","state","events","isOpen","selectedEvent","handleCreateFormOpen","setState","handleFormCancel","handleCreateEvent","newEvent","handleSelectEvent","evt","event","console","log","handleUpdateEvent","updatedEvent","map","handleDeleteEvent","filter","e","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport EventList from \"../EventList/EventList\";\nimport EventForm from \"../EventForm/EventForm\";\nimport cuid from \"cuid\";\n\nconst eventsFromDashboard = [\n  {\n    id: \"1\",\n    title: \"Trip to Tower of London\",\n    date: \"2018-03-27\",\n    category: \"culture\",\n    description:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\n    city: \"London, UK\",\n    venue: \"Tower of London, St Katharine's & Wapping, London\",\n    hostedBy: \"Bob\",\n    hostPhotoURL: \"https://randomuser.me/api/portraits/men/20.jpg\",\n    attendees: [\n      {\n        id: \"a\",\n        name: \"Bob\",\n        photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\n      },\n      {\n        id: \"b\",\n        name: \"Tom\",\n        photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\n      }\n    ]\n  },\n  {\n    id: \"2\",\n    title: \"Trip to Punch and Judy Pub\",\n    date: \"2018-03-28\",\n    category: \"drinks\",\n    description:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\n    city: \"London, UK\",\n    venue: \"Punch & Judy, Henrietta Street, London, UK\",\n    hostedBy: \"Tom\",\n    hostPhotoURL: \"https://randomuser.me/api/portraits/men/22.jpg\",\n    attendees: [\n      {\n        id: \"b\",\n        name: \"Tom\",\n        photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\n      },\n      {\n        id: \"a\",\n        name: \"Bob\",\n        photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\n      }\n    ]\n  }\n];\n\n\n\nclass EventDashboard extends Component {\n  state = {\n    events: eventsFromDashboard,\n    isOpen: false,\n    selectedEvent: null\n  };\n\n  // handleIsOpenToggle = () => {\n  //   this.setState(({ isOpen }) => ({\n  //     isOpen: !isOpen\n  //   }));\n  // };\n\n  handleCreateFormOpen = () => {\n    this.setState({\n      isOpen: true,\n      selectedEvent: null\n    });\n  };\n\n  handleFormCancel = () => {\n    this.setState({\n      isOpen: false\n    });\n  };\n\n  handleCreateEvent = newEvent => {\n    newEvent.id = cuid();\n    newEvent.hostPhotoURL = \"./assets/user.png\";\n    this.setState(({ events }) => ({\n      events: [...events, newEvent],\n      isOpen: false\n    }));\n  };\n\n  handleSelectEvent = (evt, event) => {\n    console.log(evt);\n    console.log(event);\n    this.setState({\n      selectedEvent: event,\n      isOpen: true\n    });\n  };\n\n  handleUpdateEvent = updatedEvent => {\n    this.setState(({ events }) => ({\n      events: events.map(event => {\n        if (event.id === updatedEvent.id) {\n          return { ...updatedEvent };\n        } else {\n          return event;\n        }\n      })\n    }));\n  };\n\n  handleDeleteEvent = id => {\n    this.setState(({ events }) => ({\n      events: events.filter(e => e.id !== id)\n    }));\n  };\n  render() {\n    const { events, isOpen, selectedEvent } = this.state;\n    return (\n      <Grid>\n        <Grid.Column width={10}>\n          <EventList\n            deleteEvent={this.handleDeleteEvent}\n            events={events}\n            selectEvent={this.handleSelectEvent}\n          />\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <Button\n            onClick={this.handleCreateFormOpen}\n            positive\n            content='Create Event'\n          />\n          {isOpen && (\n            <EventForm\n              key={selectedEvent ? selectedEvent.id : 0}\n              updateEvent={this.handleUpdateEvent}\n              selectedEvent={selectedEvent}\n              createEvent={this.handleCreateEvent}\n              cancelFormOpen={this.handleFormCancel}\n            />\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default EventDashboard;\n"]},"metadata":{},"sourceType":"module"}