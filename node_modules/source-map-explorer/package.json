{
  "_args": [
    [
      {
        "raw": "source-map-explorer@^1.5.0",
        "scope": null,
        "escapedName": "source-map-explorer",
        "name": "source-map-explorer",
        "rawSpec": "^1.5.0",
        "spec": ">=1.5.0 <2.0.0",
        "type": "range"
      },
      "/Applications/XAMPP/xamppfiles/htdocs/revents"
    ]
  ],
  "_from": "source-map-explorer@^1.5.0",
  "_hasShrinkwrap": false,
  "_id": "source-map-explorer@1.8.0",
  "_location": "/source-map-explorer",
  "_nodeVersion": "10.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/source-map-explorer_1.8.0_1552744275105_0.09775718739717743"
  },
  "_npmUser": {
    "name": "chinstu",
    "email": "nikolay.n.borzov@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "is-wsl": "1.1.0"
  },
  "_requested": {
    "raw": "source-map-explorer@^1.5.0",
    "scope": null,
    "escapedName": "source-map-explorer",
    "name": "source-map-explorer",
    "rawSpec": "^1.5.0",
    "spec": ">=1.5.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/source-map-explorer/-/source-map-explorer-1.8.0.tgz",
  "_shasum": "61cb8ffaff65d10ae2e6b60228fc625f523c41ff",
  "_shrinkwrap": null,
  "_spec": "source-map-explorer@^1.5.0",
  "_where": "/Applications/XAMPP/xamppfiles/htdocs/revents",
  "author": {
    "name": "Dan Vanderkam",
    "url": "danvdk@gmail.com"
  },
  "bin": {
    "source-map-explorer": "index.js"
  },
  "bugs": {
    "url": "https://github.com/danvk/source-map-explorer/issues"
  },
  "dependencies": {
    "btoa": "^1.2.1",
    "convert-source-map": "^1.6.0",
    "docopt": "^0.6.2",
    "ejs": "^2.6.1",
    "fs-extra": "^7.0.1",
    "glob": "^7.1.3",
    "opn": "^5.5.0",
    "source-map": "^0.5.1",
    "temp": "^0.9.0"
  },
  "description": "Analyze and debug space usage through source maps",
  "devDependencies": {
    "chai": "^4.2.0",
    "concat-stream": "^2.0.0",
    "cross-spawn": "^6.0.5",
    "eslint": "^5.15.2",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-prettier": "^3.0.1",
    "husky": "^1.3.1",
    "lint-staged": "^8.1.5",
    "mocha": "^5.2.0",
    "nyc": "^13.3.0",
    "prettier": "^1.16.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1Q0lNSw5J7pChKmjqniOCLbvLFi4KJfrtixk99CzvRcqFiGBJvRHMrw0PjLwKOvbuAo8rNOukJhEPA0Nj85xDw==",
    "shasum": "61cb8ffaff65d10ae2e6b60228fc625f523c41ff",
    "tarball": "https://registry.npmjs.org/source-map-explorer/-/source-map-explorer-1.8.0.tgz",
    "fileCount": 7,
    "unpackedSize": 51644,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcjP9TCRA9TVsSAnZWagAA+i0P+QBVqu6H6q/sP8KMMMht\naozySvxmxl6pQOV0qGfF9nnbPCruPxvqCd8GO7cHdgJt1f2L34NDjDxM52w2\nePvAZQI2BFJ3JhSbZrokcm/Ao/VxyhvCNwLUKwJztq8jTtVTgKVZlJR/iinB\n+L/m5FyEiO+dThuIWoCRgosSEA5Dfd/HwgnoZcn1PGxF0c2ZSBlh0d4BW1GE\n4NP+0X5+MzGn3q0/G6R9KjRzPfJyl90gG1aZMaAhNlLHJFbZ1wMKWDoE4UHP\n1cV0Q3fdX63CZvNwHR0zk3z3Ry6zbzn9aMe++n1AKBiX1/qlsbNwYMyFItYS\n+ijaMxfVbyZXlLPbO7eTsgY/qc1q6nchQ6k07oEr+Hrbu1WnfVQiPfTJ8drt\nJfLsNhZklxONqnt8UZSg3ADNnq3rikD1LZ8leRSlYBaqp67WRTMdoZgVjobD\nysfCeNmCsmAhoZYZPXRq/FgiaaddlwlSoRyK4nTxo6rLFvsCNiJO7vBPvNjL\no+WHqTwNQOPPSKGGVF33Ivkm+kxC57dIGBqgBe+wiRWBJoug+UxHGtdp2s+F\nv3af4+TR4IN9ZfT5FOy/UpFxr+ztftS/xwkb4d4ZMArPpL4FDGoVDdOQPaN9\nib01Xhtkj0KlngJp7mGjw39IbZG8mqY6tu+nQY+yHKCVKFNiuO6f5UDwgxHo\nLjqa\r\n=DkTi\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "vendor",
    "index.js",
    "tree-viz.ejs",
    "LICENSE",
    "README.md"
  ],
  "gitHead": "fcd5d43c1d91323817faf41262ff71393207c08e",
  "homepage": "https://github.com/danvk/source-map-explorer#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "source-map",
    "browser",
    "minification"
  ],
  "license": "Apache-2.0",
  "lint-staged": {
    "*.js": [
      "mocha",
      "eslint --fix",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "danvk",
      "email": "danvdk@gmail.com"
    },
    {
      "name": "hypercubed",
      "email": "hypercubed@gmail.com"
    }
  ],
  "name": "source-map-explorer",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/danvk/source-map-explorer.svg?branch=v1.1.0)](https://travis-ci.org/danvk/source-map-explorer) [![NPM version](http://img.shields.io/npm/v/source-map-explorer.svg)](https://www.npmjs.org/package/source-map-explorer)\n# source-map-explorer\nAnalyze and debug JavaScript (or Sass or LESS) code bloat through source maps.\n\nThe source map explorer determines which file each byte in your minified code came from. It shows you a [treemap][] visualization to help you debug where all the code is coming from. Check out this [Chrome Developer video][video] (3:25) for a demo of the tool in action.\n\nInstall:\n\n    npm install -g source-map-explorer\n\nUse:\n\n    source-map-explorer bundle.min.js\n    source-map-explorer bundle.min.js bundle.min.js.map\n    source-map-explorer '*.js'\n\nThis will open up a visualization of how the space is used in your minified bundle:\n\n<img src=\"screenshot.png\">\n\nHere's a [demo][] with a more complex bundle.\n\nHere's [another demo][] where you can see a bug: there are two copies of React\nin the bundle (perhaps because of out-of-date dependencies).\n\n## Options\n\n* `--json`: output JSON instead of displaying a visualization:\n\n    ```\n    source-map-explorer --json foo.min.js\n    {\n      \"node_modules/browserify/node_modules/browser-pack/_prelude.js\": 463,\n      \"bar.js\": 62,\n      \"foo.js\": 137\n    }\n    ```\n\n* `--tsv`: output tab-delimited values instead of displaying a visualization:\n\n    ```\n    source-map-explorer --tsv foo.min.js\n    Source\tSize\n    dist/bar.js\t62\n    dist/foo.js\t137\n    ```\n\n    If you just want a list of files, you can do `source-map-explorer --tsv foo.min.js | sed 1d | cut -f1`.\n\n* `--html`: output HTML to stdout. By default, source-map-explorer writes HTML to a temporary file and opens it in your default browser. If you want to save the output (e.g. to share), pipe it to a file:\n\n    ```\n    source-map-explorer --html foo.min.js > tree.html\n    ```\n\n* `-m`, `--only-mapped`: exclude \"unmapped\" bytes from the output. This will result in total counts less than the file size.\n\n* `--replace`, `--with`: The paths in source maps sometimes have artifacts that are difficult to get rid of. These flags let you do simple find & replaces on the paths. For example:\n\n    ```\n    source-map-explorer foo.min.js --replace 'dist/' --with ''\n    ```\n\n    You can specify these flags multiple times. Be aware that the find/replace is done _after_ eliminating shared prefixes between paths.\n\n    These are regular expressions.\n\n* `--noroot`: By default, source-map-explorer finds common prefixes between all source files and eliminates them, since they add complexity to the visualization with no real benefit. But if you want to disable this behavior, set the `--noroot` flag.\n\n## API\n### `explore(filePathOrContent[, sourceMapPathOrContent][, options])`\n* `filePathOrContent` <[string]|[Buffer]> - path to file or Buffer with contents\n* `sourceMapPathOrContent` <[string]|[Buffer]> - path to source map or Buffer with contents\n* `options` <[Object]> Options for generation\n  * `onlyMapped` <[boolean]> (default `false`) See `--only-mapped` option above for details\n  * `html` <[boolean]> (default `false`) When true html will be included in returned object\n  * `noRoot` <[boolean]> (default `false`) See `--noroot` option above for details\n  * `replace` <[Object]<{ [from: [string]]: [string] }>> Mapping for replacement, see `--replace`, `--with` options above for details.\n* returns: <[Object]>\n  * `totalBytes` <[number]> Size of the provided file\n  * `unmappedBytes` <[number]>\n  * `files` <[Object]<{ [sourceFile: [string]]: [number] }>> Map containing filenames from the source map and size in bytes they take inside of provided file. Additional key  `<unmapped>` is included if `options.onlyMapped` is `false`.\n  * `html` <[string]> Contains self-packed html that can be opened in the browser, only if `options.html` is `true`\n\nExample:\n```javascript\nrequire('source-map-explorer')('testdata/foo.min.js', { html: true })\n\n// Returns\n{\n  totalBytes: 697,\n  unmappedBytes: 0,\n  files: {\n    'node_modules/browserify/node_modules/browser-pack/_prelude.js': 463,\n    'dist/bar.js': 97,\n    'dist/foo.js': 137,\n    '<unmapped>': 0\n  },\n  html: '<!doctype html>...'\n}\n```\n\n### `exploreBundlesAndWriteHtml(writeConfig, codePath[, mapPath])`\n* `writeConfig` <[Object]> Configuration how to write the html file.\n  * `path` <[string]> Path to write.\n  * `fileName` <[string]> File name to write.\n* `codePath` <[string]> Path to bundle file or glob matching bundle files.\n* `mapPath` <[string]> Path to bundle map file.\n\nExample:\n\n```javascript\nconst path = require('path')\nconst {exploreBundlesAndWriteHtml} = require('source-map-explorer')\n\nconst writePath = path.resolve(__dirname, 'this/path/will/be/ensured/to/exist/ok/thanks')\nconst writeConfig = {\n  path: writePath, \n  fileName: 'source.html'\n}\n\nexploreBundlesAndWriteHtml(writeConfig, 'build/static/js/*.*')\n  .then(() => { \n    console.log(':)')\n  })\n  .catch(err => {\n    console.err(':(', err)\n  })\n```\n\n## Generating source maps\n\nFor source-map-explorer to be useful, you need to generate a source map which\nmaps positions in your minified file all the way back to the files from which\nthey came.\n\nIf you use [browserify][], you can generate a JavaScript file with an [inline\nsource map][inline] using the `--debug` flag:\n\n    browserify -r .:foo --debug -o foo.bundle.js\n    source-map-explorer foo.bundle.js\n\nIf you subsequently minify your JavaScript, you'll need to ensure that the\nfinal source map goes all the way back to the original files. For example,\nusing browserify, [uglify][] and [exorcist][]:\n\n```bash\nbrowserify -r .:foo --debug -o foo.bundle.js\n# foo.bundle.js has an inline source map\ncat foo.bundle.js | exorcist foo.bundle.js.map > /dev/null\n# foo.bundle.js.map is an external source map for foo.bundle.js\nuglifyjs -c -m \\\n  --in-source-map foo.bundle.js.map \\\n  --source-map foo.min.js.map \\\n  -o foo.min.js \\\n  foo.bundle.js\n# foo.min.js has an external source map in foo.min.js.map\nsource-map-explorer foo.min.js\n```\n\n## Types of source maps\n\nThere are two types of source maps: inline and external.\n\nIf your JS file has an inline source map, then its last line will look\nsomething like this:\n\n```\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJm...\n```\n\nThis encodes the sourcemap as a base64 data URL. If your file has an inline\nsource map, the source-map-explorer should have no trouble understanding it.\n\nIf your last line instead looks like this:\n\n```\n//# sourceMappingURL=foo.min.js.map\n```\n\nThen the source map lives in an external `.map` file. The source-map-explorer\nwill try to find this file, but this often fails because it's unclear what the\nURL is relative to.\n\nIf this happens, just pass in the source map explicitly, e.g. (in bash or zsh):\n\n```\nsource-map-explorer path/to/foo.min.js{,.map}\n```\n\n\n[demo]: https://cdn.rawgit.com/danvk/source-map-explorer/08b0e130cb9345f9061760bf8a8d9136ea60b457/demo.html\n[another demo]: https://cdn.rawgit.com/danvk/source-map-explorer/08b0e130cb9345f9061760bf8a8d9136ea60b457/demo-bug.html\n[browserify]: http://browserify.org/\n[uglify]: https://github.com/mishoo/UglifyJS2\n[exorcist]: https://github.com/thlorenz/exorcist\n[inline]: /README.md#types-of-source-maps\n[treemap]: https://github.com/martine/webtreemap\n[video]: https://www.youtube.com/watch?v=7aY9BoMEpG8\n[boolean]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type \"Boolean\"\n[Buffer]: https://nodejs.org/api/buffer.html#buffer_class_buffer \"Buffer\"\n[Object]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object \"Object\"\n[string]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type \"String\"\n[number]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type \"Number\"\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danvk/source-map-explorer.git"
  },
  "scripts": {
    "coverage": "nyc --reporter=lcov mocha",
    "lint": "eslint *.js --fix",
    "test": "mocha"
  },
  "version": "1.8.0"
}
